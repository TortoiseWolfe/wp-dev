# docker-compose.yml
version: '3.8'

services:
  db:
    image: mysql:5.7
    volumes:
      - db_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    restart: always
    networks:
      - wordpress_network

  # Development environment
  wordpress:
    build:
      context: .
      target: development
    image: mywordpress:dev
    depends_on:
      - db
    ports:
      - "8000:80"
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      # Pass site URL to WordPress
      WORDPRESS_CONFIG_EXTRA: |
        define('WP_HOME', '${WP_SITE_URL}');
        define('WP_SITEURL', '${WP_SITE_URL}');
    volumes:
      - wp_data:/var/www/html
    restart: always
    networks:
      - wordpress_network

  # Development setup
  wp-setup:
    image: mywordpress:dev
    depends_on:
      - wordpress
    environment:
      WP_SITE_URL: ${WP_SITE_URL}
      WP_SITE_TITLE: ${WP_SITE_TITLE}
      WP_ADMIN_USER: ${WP_ADMIN_USER}
      WP_ADMIN_PASSWORD: ${WP_ADMIN_PASSWORD}
      WP_ADMIN_EMAIL: ${WP_ADMIN_EMAIL}
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      SKIP_DEMO_CONTENT: ${SKIP_DEMO_CONTENT}
    volumes:
      - wp_data:/var/www/html
    # Run setup and conditionally run demo-content
    command: >
      bash -c "/usr/local/bin/scripts/setup.sh"
    restart: "no"
    networks:
      - wordpress_network

  # Production environment
  wordpress-prod:
    build:
      context: .
      target: production
    image: ghcr.io/tortoisewolfe/wp-dev:v0.1.1
    depends_on:
      - db
    expose:
      - "80"
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WP_SITE_URL: ${WP_SITE_URL}
      WP_ADMIN_PASSWORD: ${WP_ADMIN_PASSWORD}
      WORDPRESS_CONFIG_EXTRA: |
        define('WP_DEBUG', false);
        define('WP_MEMORY_LIMIT', '256M');
        define('WP_AUTO_UPDATE_CORE', false);
        define('FORCE_SSL_ADMIN', true);
    volumes:
      - wp_prod_data:/var/www/html
    restart: always
    healthcheck:
      test: ["CMD", "wp", "core", "is-installed", "--allow-root"]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      - wordpress_network
    
  wp-prod-setup:
    image: ghcr.io/tortoisewolfe/wp-dev:v0.1.1
    depends_on:
      - wordpress-prod
    environment:
      WP_SITE_URL: ${WP_SITE_URL}
      WP_SITE_TITLE: ${WP_SITE_TITLE}
      WP_ADMIN_USER: ${WP_ADMIN_USER}
      WP_ADMIN_PASSWORD: ${WP_ADMIN_PASSWORD}
      WP_ADMIN_EMAIL: ${WP_ADMIN_EMAIL}
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      SKIP_DEMO_CONTENT: ${SKIP_DEMO_CONTENT:-true}
    volumes:
      - wp_prod_data:/var/www/html
    command: >
      bash -c "sleep 45 &&
              wp core install --url=${WP_SITE_URL} --title=\"${WP_SITE_TITLE}\" --admin_user=${WP_ADMIN_USER} --admin_password=${WP_ADMIN_PASSWORD} --admin_email=${WP_ADMIN_EMAIL} --path=/var/www/html --skip-email --allow-root &&
              wp option update siteurl ${WP_SITE_URL} --allow-root &&
              wp option update home ${WP_SITE_URL} --allow-root &&
              /usr/local/bin/scripts/setup.sh"
    restart: "no"
    networks:
      - wordpress_network

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:1.25
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - certbot_data:/var/www/certbot
    depends_on:
      - wordpress-prod
    restart: always
    networks:
      - wordpress_network

  # Certbot for SSL certificate generation and renewal
  certbot:
    image: certbot/certbot:latest
    volumes:
      - certbot_data:/var/www/certbot
      - ./nginx/ssl:/etc/letsencrypt
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    restart: unless-stopped
    networks:
      - wordpress_network
    environment:
      - CERTBOT_EMAIL=${CERTBOT_EMAIL:-admin@example.com}
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}

volumes:
  db_data:
  wp_data:
  wp_prod_data:
  certbot_data:

networks:
  wordpress_network:
    driver: bridge
