# docker-compose.yml
version: '3.8'

services:
  db:
    image: mysql:5.7
    volumes:
      - db_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    restart: always
    # Set MySQL mode to be compatible with BuddyPress by default
    command: --sql-mode="NO_ENGINE_SUBSTITUTION,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,ONLY_FULL_GROUP_BY"
    networks:
      - wordpress_network

  # Development environment
#   wordpress:
#     build:
#       context: .
#       target: development
#     image: mywordpress:dev
#     ports:
#       - "8000:80"
#     environment:
#       WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
#       WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
#       WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
#       WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
#       WP_SITE_URL: ${WP_SITE_URL}
#     volumes:
#       - wp_data:/var/www/html
#       - ./devscripts:/usr/local/bin/devscripts
#     depends_on:
#       - db
#     restart: always
#     networks:
#       - wordpress_network
# 
#   wp-setup:
#     build:
#       context: .
#       target: development
#     image: mywordpress:dev
#     depends_on:
#       - db
#       - wordpress
#     environment:
#       WP_SITE_URL: ${WP_SITE_URL}
#       WP_SITE_TITLE: ${WP_SITE_TITLE}
#       WP_ADMIN_USER: ${WP_ADMIN_USER}
#       WP_ADMIN_PASSWORD: ${WP_ADMIN_PASSWORD}
#       WP_ADMIN_EMAIL: ${WP_ADMIN_EMAIL}
#       WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
#       WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
#       WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
#       WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
#       SKIP_DEMO_CONTENT: ${SKIP_DEMO_CONTENT:-false}
#       # BuddyPress component activation flags
#       BUDDYPRESS_ACTIVATE_XPROFILE: ${BUDDYPRESS_ACTIVATE_XPROFILE:-true}
#       BUDDYPRESS_ACTIVATE_GROUPS: ${BUDDYPRESS_ACTIVATE_GROUPS:-true}
#       BUDDYPRESS_ACTIVATE_ACTIVITY: ${BUDDYPRESS_ACTIVATE_ACTIVITY:-true}
#       BUDDYPRESS_ACTIVATE_NOTIFICATIONS: ${BUDDYPRESS_ACTIVATE_NOTIFICATIONS:-true}
#       BUDDYPRESS_ACTIVATE_FRIENDS: ${BUDDYPRESS_ACTIVATE_FRIENDS:-true}
#       BUDDYPRESS_ACTIVATE_MESSAGES: ${BUDDYPRESS_ACTIVATE_MESSAGES:-true}
#       BUDDYPRESS_ACTIVATE_BLOGS: ${BUDDYPRESS_ACTIVATE_BLOGS:-true}
#       BUDDYPRESS_ACTIVATE_SETTINGS: ${BUDDYPRESS_ACTIVATE_SETTINGS:-true}
#     volumes:
#       - wp_data:/var/www/html
#       - ./devscripts:/usr/local/bin/devscripts
#     command: >
#       bash -c "
#               # Wait for database to be ready
#               echo 'Waiting for database connection...' &&
#               # Use a file flag to prevent infinite restart loop
#               if [ -f /var/www/html/.setup_complete ]; then
#                 echo 'Setup already completed, skipping...'
#                 exit 0
#               fi &&
#               # Use wp-cli instead of mysql client for compatibility
#               until wp core version --path=/var/www/html --allow-root; do
#                 echo 'Database connection not ready - waiting...'
#                 sleep 5
#               done &&
#               
#               # Set up WordPress if needed
#               if ! wp core is-installed --path=/var/www/html --allow-root; then
#                 echo 'Installing WordPress...' &&
#                 wp core install --url=${WP_SITE_URL} --title=\"${WP_SITE_TITLE}\" --admin_user=${WP_ADMIN_USER} --admin_password=${WP_ADMIN_PASSWORD} --admin_email=${WP_ADMIN_EMAIL} --path=/var/www/html --skip-email --allow-root
#               else
#                 echo 'WordPress already installed'
#               fi &&
#               
#               # Ensure correct site URLs
#               wp option update siteurl ${WP_SITE_URL} --allow-root &&
#               wp option update home ${WP_SITE_URL} --allow-root &&
#               
#               # Make custom scripts executable (ignore errors)
#               chmod +x /usr/local/bin/devscripts/demo-content.sh || true &&
#               
#               # Run the main setup script
#               /usr/local/bin/scripts/setup.sh && touch /var/www/html/.setup_complete && echo 'Setup complete flag created.'
#               "
#     restart: "on-failure"
#     networks:
#       - wordpress_network

  # Production environment
  wordpress-prod:
    build:
      context: .
      target: production
    # Use remote image from GitHub Container Registry
    image: ghcr.io/tortoisewolfe/wp-dev:v0.1.3
    depends_on:
      - db
    expose:
      - "80"
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WP_SITE_URL: ${WP_SITE_URL}
      WP_ADMIN_PASSWORD: ${WP_ADMIN_PASSWORD}
      DOMAIN_NAME: ${DOMAIN_NAME}
      WORDPRESS_CONFIG_EXTRA: |
        define('WP_DEBUG', false);
        define('WP_MEMORY_LIMIT', '256M');
        define('WP_AUTO_UPDATE_CORE', false);
        define('FORCE_SSL_ADMIN', true);
        define('WP_HOME', 'https://${DOMAIN_NAME}');
        define('WP_SITEURL', 'https://${DOMAIN_NAME}');
    volumes:
      - wp_prod_data:/var/www/html
      - ./scripts/apache/security.conf:/etc/apache2/conf-enabled/security.conf:ro
    restart: always
    healthcheck:
      test: ["CMD", "wp", "core", "is-installed", "--allow-root"]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      - wordpress_network
    
  wp-prod-setup:
    build:
      context: .
      target: production
    # Use remote image from GitHub Container Registry
    image: ghcr.io/tortoisewolfe/wp-dev:v0.1.3
    depends_on:
      - db
      - wordpress-prod
    environment:
      WP_SITE_URL: ${WP_SITE_URL}
      WP_SITE_TITLE: ${WP_SITE_TITLE}
      WP_ADMIN_USER: ${WP_ADMIN_USER}
      WP_ADMIN_PASSWORD: ${WP_ADMIN_PASSWORD}
      WP_ADMIN_EMAIL: ${WP_ADMIN_EMAIL}
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      SKIP_DEMO_CONTENT: ${SKIP_DEMO_CONTENT:-false}
      # BuddyPress component activation flags
      BUDDYPRESS_ACTIVATE_XPROFILE: ${BUDDYPRESS_ACTIVATE_XPROFILE:-true}
      BUDDYPRESS_ACTIVATE_GROUPS: ${BUDDYPRESS_ACTIVATE_GROUPS:-true}
      BUDDYPRESS_ACTIVATE_ACTIVITY: ${BUDDYPRESS_ACTIVATE_ACTIVITY:-true}
      BUDDYPRESS_ACTIVATE_NOTIFICATIONS: ${BUDDYPRESS_ACTIVATE_NOTIFICATIONS:-true}
      BUDDYPRESS_ACTIVATE_FRIENDS: ${BUDDYPRESS_ACTIVATE_FRIENDS:-true}
      BUDDYPRESS_ACTIVATE_MESSAGES: ${BUDDYPRESS_ACTIVATE_MESSAGES:-true}
      BUDDYPRESS_ACTIVATE_BLOGS: ${BUDDYPRESS_ACTIVATE_BLOGS:-true}
      BUDDYPRESS_ACTIVATE_SETTINGS: ${BUDDYPRESS_ACTIVATE_SETTINGS:-true}
    volumes:
      - wp_prod_data:/var/www/html
      # Also mount the local devscripts to ensure latest versions are used
      - ./devscripts:/usr/local/bin/devscripts
    command: >
      bash -c "
              # Wait for database to be ready
              echo 'Waiting for database connection...' &&
              # Use a file flag to prevent infinite restart loop
              if [ -f /var/www/html/.setup_complete ]; then
                echo 'Setup already completed, skipping...'
                exit 0
              fi &&
              # Use wp-cli instead of mysql client for compatibility
              until wp core version --path=/var/www/html --allow-root; do
                echo 'Database connection not ready - waiting...'
                sleep 5
              done &&
              
              # Set up WordPress if needed
              if ! wp core is-installed --path=/var/www/html --allow-root; then
                echo 'Installing WordPress...' &&
                wp core install --url=${WP_SITE_URL} --title=\"${WP_SITE_TITLE}\" --admin_user=${WP_ADMIN_USER} --admin_password=${WP_ADMIN_PASSWORD} --admin_email=${WP_ADMIN_EMAIL} --path=/var/www/html --skip-email --allow-root
              else
                echo 'WordPress already installed'
              fi &&
              
              # Ensure correct site URLs
              wp option update siteurl ${WP_SITE_URL} --allow-root &&
              wp option update home ${WP_SITE_URL} --allow-root &&
              
              # Make custom scripts executable (ignore errors)
              chmod +x /usr/local/bin/devscripts/demo-content.sh || true &&
              
              # Run theme patch install script
              /usr/local/bin/devscripts/theme-patches/install.sh && \
              
              # Run the main setup script
              /usr/local/bin/scripts/setup.sh && touch /var/www/html/.setup_complete && echo 'Setup complete flag created.'
              "
    restart: "on-failure"
    networks:
      - wordpress_network

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:1.25
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - certbot_data:/var/www/certbot
    depends_on:
      - wordpress-prod
    restart: always
    networks:
      - wordpress_network

  # Certbot for SSL certificate generation and renewal
  certbot:
    image: certbot/certbot:v2.6.0  # pinned specific version instead of 'latest'
    volumes:
      - certbot_data:/var/www/certbot
      - ./nginx/ssl:/etc/letsencrypt
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    restart: unless-stopped
    networks:
      - wordpress_network
    environment:
      - CERTBOT_EMAIL=${CERTBOT_EMAIL:-admin@example.com}
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}

volumes:
  db_data:
  wp_data:
  wp_prod_data:
  certbot_data:

networks:
  wordpress_network:
    driver: bridge
